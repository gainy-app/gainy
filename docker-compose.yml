version: '3.6'
services:
  meltano-airflow-scheduler:
    restart: always
    build:
      context: ./src/gainy-fetch
      args:
        BASE_IMAGE_REGISTRY_ADDRESS: ${BASE_IMAGE_REGISTRY_ADDRESS}
        BASE_IMAGE_VERSION: ${BASE_IMAGE_VERSION}
        CODEARTIFACT_PIPY_URL: ${CODEARTIFACT_PIPY_URL}
        GAINY_COMPUTE_VERSION: ${GAINY_COMPUTE_VERSION}
    volumes:
      - ./src/gainy-fetch/meltano/scripts:/project/scripts
      - ./src/gainy-fetch/meltano/meltano.template.yml:/project/meltano.template.yml
      - ./src/gainy-fetch/meltano/transform:/project/transform
      - ./src/gainy-fetch/meltano/data:/project/data
      - ./src/gainy-fetch/meltano/orchestrate:/project/orchestrate
      - ./src/gainy-fetch/meltano/seed:/project/seed
      - ./src/gainy-fetch/meltano/catalog:/project/catalog
      - meltano_data:/project/.meltano
    depends_on:
      - postgres
      - hasura
    entrypoint: "/init.sh"
    command: "invoke airflow scheduler"
    env_file:
      - .dockerenv

  meltano-airflow-ui:
    restart: always
    build:
      context: ./src/gainy-fetch
      args:
        BASE_IMAGE_REGISTRY_ADDRESS: ${BASE_IMAGE_REGISTRY_ADDRESS}
        BASE_IMAGE_VERSION: ${BASE_IMAGE_VERSION}
        CODEARTIFACT_PIPY_URL: ${CODEARTIFACT_PIPY_URL}
        GAINY_COMPUTE_VERSION: ${GAINY_COMPUTE_VERSION}
    ports:
      - "5001:5001"
    volumes:
      - ./src/gainy-fetch/meltano/orchestrate:/project/orchestrate
      - meltano_data:/project/.meltano
    depends_on:
      - postgres
      - meltano-airflow-scheduler
    entrypoint: "/wait.sh"
    command: "invoke airflow webserver -p 5001"
    env_file:
      - .dockerenv

  meltano-dbt-docs:
    restart: always
    build:
      context: ./src/gainy-fetch
      args:
        BASE_IMAGE_REGISTRY_ADDRESS: ${BASE_IMAGE_REGISTRY_ADDRESS}
        BASE_IMAGE_VERSION: ${BASE_IMAGE_VERSION}
        CODEARTIFACT_PIPY_URL: ${CODEARTIFACT_PIPY_URL}
        GAINY_COMPUTE_VERSION: ${GAINY_COMPUTE_VERSION}
    ports:
      - "5002:5002"
    volumes:
      - ./src/gainy-fetch/meltano/scripts:/project/scripts
      - ./src/gainy-fetch/meltano/meltano.template.yml:/project/meltano.template.yml
      - ./src/gainy-fetch/meltano/transform:/project/transform
      - meltano_data:/project/.meltano
    depends_on:
      - postgres
      - meltano-airflow-scheduler
    entrypoint: "/wait.sh"
    command: "invoke dbt docs serve --port 5002"
    env_file:
      - .dockerenv

  postgres:
    image: postgres:12
    restart: always
    volumes:
    - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  hasura:
    build:
      context: ./src/hasura
      args:
        BASE_IMAGE_REGISTRY_ADDRESS: ${BASE_IMAGE_REGISTRY_ADDRESS}
        BASE_IMAGE_VERSION: ${BASE_IMAGE_VERSION}
    ports:
      - "8080:8080"
      - "9693:9693"
      - "9695:9695"
    volumes:
      - ./src/hasura/hasura:/hasura
    depends_on:
      - postgres
    restart: always
    env_file:
      - .dockerenv

  lambda-router:
    build:
      context: ./src/aws/router
    volumes:
      - ./src/aws/router:/app
    ports:
      - "8082:5000"
    environment:
      LAMBDA_PYTHON_ACTION_HOST: lambda-python-action
      LAMBDA_PYTHON_TRIGGER_HOST: lambda-python-trigger

  lambda-python-trigger:
    build:
      context: ./src/aws/lambda-python
      args:
        BASE_IMAGE_REGISTRY_ADDRESS: ${BASE_IMAGE_REGISTRY_ADDRESS}
        BASE_IMAGE_VERSION: ${BASE_IMAGE_VERSION}
        CODEARTIFACT_PIPY_URL: ${CODEARTIFACT_PIPY_URL}
        GAINY_COMPUTE_VERSION: ${GAINY_COMPUTE_VERSION}
    restart: always
    volumes:
      - ./src/aws/lambda-python/lambda_python:/var/task
    command: [ "hasura_handler.handle_trigger" ]
    env_file:
      - .dockerenv

  lambda-python-action:
    build:
      context: ./src/aws/lambda-python
      args:
        BASE_IMAGE_REGISTRY_ADDRESS: ${BASE_IMAGE_REGISTRY_ADDRESS}
        BASE_IMAGE_VERSION: ${BASE_IMAGE_VERSION}
        CODEARTIFACT_PIPY_URL: ${CODEARTIFACT_PIPY_URL}
        GAINY_COMPUTE_VERSION: ${GAINY_COMPUTE_VERSION}
    restart: always
    volumes:
      - ./src/aws/lambda-python/lambda_python:/var/task
    command: [ "hasura_handler.handle_action" ]
    env_file:
      - .dockerenv

  websockets_eod:
    build:
      context: ./src/websockets
    restart: always
    volumes:
      - ./src/websockets:/srv
    command: ["client_eod.py"]
    env_file:
      - .dockerenv
    deploy:
      replicas: 0

  websockets_polygon:
    build:
      context: ./src/websockets
    restart: always
    volumes:
      - ./src/websockets:/srv
    command: ["client_polygon.py"]
    env_file:
      - .dockerenv
    deploy:
      replicas: 0

volumes:
  db_data:
  meltano_data:

networks:
  default:
    name: gainy-default
