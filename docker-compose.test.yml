version: '3.6'
services:
  test-meltano:
    restart: always
    build:
      context: ./src/gainy-fetch
      args:
        BASE_IMAGE_REGISTRY_ADDRESS: ${BASE_IMAGE_REGISTRY_ADDRESS}
        BASE_IMAGE_VERSION: ${BASE_IMAGE_VERSION}
        CODEARTIFACT_PIPY_URL: ${CODEARTIFACT_PIPY_URL}
        GAINY_COMPUTE_VERSION: ${GAINY_COMPUTE_VERSION}
    volumes:
      - ./src/gainy-fetch/meltano/meltano.template.yml:/project/meltano.template.yml
      - ./src/gainy-fetch/meltano/scripts:/project/scripts
      - ./src/gainy-fetch/meltano/transform:/project/transform
      - ./src/gainy-fetch/meltano/data:/project/data
      - ./src/gainy-fetch/meltano/orchestrate:/project/orchestrate
      - ./src/gainy-fetch/meltano/seed:/project/seed
      - ./src/gainy-fetch/meltano/catalog:/project/catalog
      - ./tests:/project/tests
    environment:
      PG_HOST: test-postgres
      TARGET_POSTGRES_HOST: test-postgres
      MELTANO_DATABASE_URI: "postgresql://postgres:postgrespassword@test-postgres:5432/postgres?options=-csearch_path%3Dmeltano"
      NO_AIRFLOW: "true"
      DBT_TARGET_SCHEMA: public_test
    depends_on:
      - test-postgres
      - test-hasura
    entrypoint: "/init.sh"

  test-postgres:
    image: postgres:12
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  test-hasura:
    build:
      context: ./src/hasura
      args:
        BASE_IMAGE_REGISTRY_ADDRESS: ${BASE_IMAGE_REGISTRY_ADDRESS}
        BASE_IMAGE_VERSION: ${BASE_IMAGE_VERSION}
    depends_on:
      - test-postgres
      - test-lambda-router
    restart: always
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: "postgres://postgres:postgrespassword@test-postgres:5432/postgres"
      HASURA_GRAPHQL_DATABASE_URL: "postgres://postgres:postgrespassword@test-postgres:5432/postgres"
      HASURA_GRAPHQL_PUBLIC_SCHEMA_NAME: public_test
      AWS_LAMBDA_API_GATEWAY_ENDPOINT: http://test-lambda-router:5000

  test-lambda-router:
    build:
      context: ./src/aws/router
    depends_on:
      - test-lambda-python-action
      - test-lambda-python-trigger
    volumes:
      - ./src/aws/router:/app
    environment:
      LAMBDA_PYTHON_ACTION_HOST: test-lambda-python-action
      LAMBDA_PYTHON_TRIGGER_HOST: test-lambda-python-trigger

  test-lambda-python-trigger:
    build:
      context: ./src/aws/lambda-python
      args:
        BASE_IMAGE_REGISTRY_ADDRESS: ${BASE_IMAGE_REGISTRY_ADDRESS}
        BASE_IMAGE_VERSION: ${BASE_IMAGE_VERSION}
        CODEARTIFACT_PIPY_URL: ${CODEARTIFACT_PIPY_URL}
        GAINY_COMPUTE_VERSION: ${GAINY_COMPUTE_VERSION}
    restart: always
    volumes:
      - ./src/aws/lambda-python/lambda_python:/var/task
    environment:
      PG_HOST: "test-postgres"
      PUBLIC_SCHEMA_NAME: public_test
    command: [ "hasura_handler.handle_trigger" ]

  test-lambda-python-action:
    build:
      context: ./src/aws/lambda-python
      args:
        BASE_IMAGE_REGISTRY_ADDRESS: ${BASE_IMAGE_REGISTRY_ADDRESS}
        BASE_IMAGE_VERSION: ${BASE_IMAGE_VERSION}
        CODEARTIFACT_PIPY_URL: ${CODEARTIFACT_PIPY_URL}
        GAINY_COMPUTE_VERSION: ${GAINY_COMPUTE_VERSION}
    restart: always
    volumes:
      - ./src/aws/lambda-python/lambda_python:/var/task
      - ./src/aws/lambda-python/poetry.lock:/var/poetry.lock
      - ./src/aws/lambda-python/pyproject.toml:/var/pyproject.toml
    environment:
      PG_HOST: "test-postgres"
      PUBLIC_SCHEMA_NAME: public_test
    command: [ "hasura_handler.handle_action" ]
