# general
ENV=local
PUBLIC_SCHEMA_NAME=public
POSTGRES_PASSWORD=postgrespassword


# Polygon
POLYGON_API_TOKEN=
POLYGON_REALTIME_STREAMING_HOST=delayed.polygon.io
# socket.polygon.io for real-time

# EOD
EOD_API_TOKEN=OeAFFmMliFG5orCUuwAKQ8l4WWFQ67YX

# hasura
HASURA_GRAPHQL_UNAUTHORIZED_ROLE=anonymous
HASURA_GRAPHQL_METADATA_DATABASE_URL=postgres://postgres:postgrespassword@postgres:5432/postgres
HASURA_GRAPHQL_ENABLED_LOG_TYPES="startup, http-log, webhook-log, websocket-log, query-log"
HASURA_GRAPHQL_DATABASE_URL=postgres://postgres:postgrespassword@postgres:5432/postgres
HASURA_GRAPHQL_READ_REPLICA_URLS=
HASURA_GRAPHQL_PUBLIC_SCHEMA_NAME=${PUBLIC_SCHEMA_NAME}
HASURA_GRAPHQL_ENABLE_CONSOLE=true
HASURA_GRAPHQL_DEV_MODE=true
HASURA_GRAPHQL_ADMIN_SECRET=myadminsecretkey
HASURA_GRAPHQL_JWT_SEHASURA_GRAPHQL_JWT_SECRETCRET='{"type":"RS256","jwk_url": "https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com", "audience": "gainyapp", "issuer": "https://securetoken.google.com/gainyapp"}'
AWS_LAMBDA_API_GATEWAY_ENDPOINT=http://lambda-router:5000


# meltano scheduler
#AWS_ACCESS_KEY_ID
#AWS_SECRET_ACCESS_KEY
#AWS_DEFAULT_REGION
PG_DBNAME=postgres
PG_HOST=postgres
PG_PASSWORD=postgrespassword
PG_PORT=5432
PG_USERNAME=postgres
MELTANO_DATABASE_URI=postgresql://postgres:postgrespassword@postgres:5432/postgres?options=-csearch_path%3Dmeltano
AIRFLOW_DATABASE_URI=postgresql://postgres:postgrespassword@postgres:5432/postgres?options=-csearch_path=airflow
AIRFLOW_PASSWORD=admin
EODHISTORICALDATA_JOBS_COUNT=1
TAP_EODHISTORICALDATA_API_TOKEN=${EOD_API_TOKEN}
TAP_EODHISTORICALDATA_EXCHANGES=
TAP_POLYGON_API_KEY=${POLYGON_API_TOKEN}
TARGET_POSTGRES_HOST=postgres
TARGET_POSTGRES_PORT=5432
TARGET_POSTGRES_USER=postgres
TARGET_POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
TARGET_POSTGRES_DBNAME=postgres
TARGET_POSTGRES_SCHEMA=raw_data
DBT_TARGET=postgres
DBT_THREADS=2
DBT_TARGET_SCHEMA=${PUBLIC_SCHEMA_NAME}
TAP_EODHISTORICALDATA_EXCHANGE_SYMBOLS_LIMIT=10

MLFLOW_TRACKING_URI=postgresql://postgres:postgrespassword@postgres:5432/postgres?options=-csearch_path=mlflow
MLFLOW_ARTIFACT_LOCATION=

TARGET_POSTGRES_ANALYTICS_HOST=postgres
TARGET_POSTGRES_ANALYTICS_PORT=5432
TARGET_POSTGRES_ANALYTICS_USER=postgres
TARGET_POSTGRES_ANALYTICS_PASSWORD=postgrespassword
TARGET_POSTGRES_ANALYTICS_DBNAME=postgres
TARGET_POSTGRES_ANALYTICS_SCHEMA=gainy_analytics
TAP_POSTGRES_WEBSITE_HOST=postgres
TAP_POSTGRES_WEBSITE_PORT=5432
TAP_POSTGRES_WEBSITE_USER=postgres
TAP_POSTGRES_WEBSITE_PASSWORD=postgrespassword
TAP_POSTGRES_WEBSITE_DBNAME=postgres
TAP_POSTGRES_WEBSITE_SCHEMA=website
TAP_POSTGRES_HOST=postgres
TAP_POSTGRES_PORT=5432
TAP_POSTGRES_USER=postgres
TAP_POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
TAP_POSTGRES_DBNAME=postgres
TAP_POSTGRES_FILTER_SCHEMAS=public
TAP_POSTGRES_SYNC_HOST=
TAP_POSTGRES_SYNC_PORT=
TAP_POSTGRES_SYNC_USER=
TAP_POSTGRES_SYNC_PASSWORD=
TAP_POSTGRES_SYNC_DBNAME=
TAP_POSTGRES_SYNC_FILTER_SCHEMAS=
TAP_POSTGRES_ANALYTICS_FILTER_SCHEMAS=app,public

# websockets

# firebase
FIREBASE_TOKEN=
GOOGLE_APPLICATION_CREDENTIALS=/var/www/firebase.key.json

# lambda
AWS_LAMBDA_API_GATEWAY_PROXY_INTEGRATION=false
HUBSPOT_API_KEY=

# Plaid
PLAID_CLIENT_ID=
PLAID_SECRET=
PLAID_ENV=sandbox
# Use 'sandbox' to test with fake credentials in Plaid's Sandbox environment
# Use 'development' to test with real credentials while developing
# Use 'production' to go live with real users

# Algolia
ALGOLIA_APP_ID=test
ALGOLIA_API_KEY=test
ALGOLIA_TICKERS_INDEX=
ALGOLIA_COLLECTIONS_INDEX=
ALGOLIA_INDEXING_API_KEY=
ALGOLIA_SEARCH_API_KEY=

# Datadog
DATADOG_API_KEY=
DATADOG_APP_KEY=
DD_API_KEY=${DATADOG_API_KEY}
DD_SITE=datadoghq.com
