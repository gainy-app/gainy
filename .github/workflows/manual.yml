name: "Deploy to test"

on:
  workflow_dispatch:
    inputs:
      env:
        description: Environment
        required: true
        default: 'test'

jobs:
  terraform:
    name: "Terraform Test env"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: terraform

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=backend-test.hcl -reconfigure
        working-directory: terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: terraform

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true
        working-directory: terraform
        env:
          TF_VAR_env: test
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_eodhistoricaldata_api_token: ${{ secrets.TF_VAR_EODHISTORICALDATA_API_TOKEN }}
          TF_VAR_gnews_api_token: ${{ secrets.TF_VAR_GNEWS_API_TOKEN }}
          TF_VAR_google_credentials: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_google_user: ${{ secrets.GOOGLE_USER }}
          TF_VAR_google_project_id: ${{ secrets.GOOGLE_PROJECT_ID }}
          TF_VAR_google_organization_id: ${{ secrets.GOOGLE_ORGANIZATION_ID }}
          TF_VAR_google_region: ${{ secrets.GOOGLE_REGION }}
          TF_VAR_google_billing_id: ${{ secrets.GOOGLE_BILLING_ID }}
          TF_VAR_hasura_jwt_secret: ${{ secrets.HASURA_JWT_SECRET }}
          TF_VAR_cloudflare_email: ${{ secrets.CLOUDFLARE_EMAIL }}
          TF_VAR_cloudflare_api_key: ${{ secrets.CLOUDFLARE_API_KEY }}
          TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

#      - name: Terraform Apply
#        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#        run: terraform apply -auto-approve
#        working-directory: terraform
#        env:
#          TF_VAR_env: test
#          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          TF_VAR_eodhistoricaldata_api_token: ${{ secrets.TF_VAR_EODHISTORICALDATA_API_TOKEN }}
#          TF_VAR_gnews_api_token: ${{ secrets.TF_VAR_GNEWS_API_TOKEN }}
#          TF_VAR_google_credentials: ${{ secrets.GOOGLE_CREDENTIALS }}
#          TF_VAR_google_user: ${{ secrets.GOOGLE_USER }}
#          TF_VAR_google_project_id: ${{ secrets.GOOGLE_PROJECT_ID }}
#          TF_VAR_google_organization_id: ${{ secrets.GOOGLE_ORGANIZATION_ID }}
#          TF_VAR_google_region: ${{ secrets.GOOGLE_REGION }}
#          TF_VAR_google_billing_id: ${{ secrets.GOOGLE_BILLING_ID }}
#          TF_VAR_hasura_jwt_secret: ${{ secrets.HASURA_JWT_SECRET }}
#          TF_VAR_cloudflare_email: ${{ secrets.CLOUDFLARE_EMAIL }}
#          TF_VAR_cloudflare_api_key: ${{ secrets.CLOUDFLARE_API_KEY }}
#          TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
