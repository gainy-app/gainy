name: Deploy to test

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment'
        default: 'test'
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy:
    name: "Terraform Test env"
    runs-on: ubuntu-latest
    steps:
      - name: Docker Registry Auth
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 217303665077.dkr.ecr.us-east-1.amazonaws.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Docker Build Environment Variables
        run: |
          source .env.make
          echo "TF_VAR_base_image_registry_address=$BASE_IMAGE_REGISTRY_ADDRESS" >> $GITHUB_ENV
          echo "TF_VAR_base_image_version=$BASE_IMAGE_VERSION" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: terraform

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=backend-test.hcl -reconfigure
        working-directory: terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: terraform

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: terraform
        env:
          TF_VAR_env: ${{ github.event.inputs.env }}
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_eodhistoricaldata_api_token: ${{ secrets.TF_VAR_EODHISTORICALDATA_API_TOKEN }}
          TF_VAR_gnews_api_token: ${{ secrets.TF_VAR_GNEWS_API_TOKEN }}
          TF_VAR_google_credentials: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_google_user: ${{ secrets.GOOGLE_USER }}
          TF_VAR_google_project_id: ${{ secrets.GOOGLE_PROJECT_ID }}
          TF_VAR_google_organization_id: ${{ secrets.GOOGLE_ORGANIZATION_ID }}
          TF_VAR_google_region: ${{ secrets.GOOGLE_REGION }}
          TF_VAR_google_billing_id: ${{ secrets.GOOGLE_BILLING_ID }}
          TF_VAR_cloudflare_email: ${{ secrets.CLOUDFLARE_EMAIL }}
          TF_VAR_cloudflare_api_key: ${{ secrets.CLOUDFLARE_API_KEY }}
          TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          TF_VAR_datadog_api_key: ${{ secrets.DATADOG_API_KEY }}
          TF_VAR_datadog_api_url: ${{ secrets.DATADOG_API_URL }}
          TF_VAR_datadog_app_key: ${{ secrets.DATADOG_APP_KEY }}
          TF_VAR_pg_production_host: ${{ secrets.PG_PRODUCTION_HOST }}
          TF_VAR_pg_production_port: ${{ secrets.PG_PRODUCTION_PORT }}
          TF_VAR_pg_production_internal_sync_username: ${{ secrets.PG_PRODUCTION_INTERNAL_SYNC_USERNAME }}
          TF_VAR_pg_production_internal_sync_password: ${{ secrets.PG_PRODUCTION_INTERNAL_SYNC_PASSWORD }}
          TF_VAR_plaid_client_id: ${{ secrets.PLAID_CLIENT_ID }}
          TF_VAR_plaid_secret: ${{ secrets.PLAID_SECRET }}
          TF_VAR_plaid_env: ${{ secrets.PLAID_ENV }}
          TF_VAR_algolia_app_id: ${{ secrets.ALGOLIA_APP_ID }}
          TF_VAR_algolia_admin_api_key: ${{ secrets.ALGOLIA_ADMIN_API_KEY }}

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `Deploy to test:
            #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            <pre>
            ${process.env.PLAN}
            </pre>
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
