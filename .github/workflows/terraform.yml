name: Terraform

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment'
        default: 'test'
        required: true
  workflow_call:
    inputs:
      env:
        type: string
        required: true
      only_plan:
        type: boolean
        default: true
        required: true
    secrets:
      TF_API_TOKEN: { required: true }
      AWS_ACCESS_KEY_ID: { required: true }
      AWS_SECRET_ACCESS_KEY: { required: true }
      TF_VAR_EODHISTORICALDATA_API_TOKEN: { required: true }
      TF_VAR_GNEWS_API_TOKEN: { required: true }
      GOOGLE_CREDENTIALS: { required: true }
      GOOGLE_USER: { required: true }
      GOOGLE_PROJECT_ID: { required: true }
      GOOGLE_ORGANIZATION_ID: { required: true }
      GOOGLE_REGION: { required: true }
      GOOGLE_BILLING_ID: { required: true }
      GOOGLE_PLACES_API_KEY: { required: true }
      CLOUDFLARE_EMAIL: { required: true }
      CLOUDFLARE_API_KEY: { required: true }
      CLOUDFLARE_ZONE_ID: { required: true }
      DATADOG_API_KEY: { required: true }
      DATADOG_API_URL: { required: true }
      DATADOG_APP_KEY: { required: true }
      DATADOG_AWS_EXTERNAL_ID: { required: true }
      PG_PRODUCTION_HOST: { required: true }
      PG_PRODUCTION_PORT: { required: true }
      PG_PRODUCTION_INTERNAL_SYNC_USERNAME: { required: true }
      PG_PRODUCTION_INTERNAL_SYNC_PASSWORD: { required: true }
      PLAID_CLIENT_ID: { required: true }
      PLAID_SECRET: { required: true }
      PLAID_DEVELOPMENT_SECRET: { required: true }
      PLAID_SANDBOX_SECRET: { required: true }
      PLAID_ENV: { required: true }
      ALGOLIA_APP_ID: { required: true }
      ALGOLIA_ADMIN_API_KEY: { required: true }
      HUBSPOT_API_KEY: { required: true }
      POLYGON_API_TOKEN: { required: true }
      COINGECKO_API_KEY: { required: true }
      ONESIGNAL_APP_ID: { required: true }
      ONESIGNAL_API_KEY: { required: true }
      REVENUECAT_API_KEY: { required: true }
      BIGQUERY_CREDENTIALS: { required: true }
      STRIPE_API_KEY: { required: true }
      STRIPE_PUBLISHABLE_KEY: { required: true }
      DRIVEWEALTH_IS_UAT: { required: true }
      DRIVEWEALTH_APP_KEY: { required: true }
      DRIVEWEALTH_WLP_ID: { required: true }
      DRIVEWEALTH_PARENT_IBID: { required: true }
      DRIVEWEALTH_RIA_ID: { required: true }
      DRIVEWEALTH_RIA_PRODUCT_ID: { required: true }
      DRIVEWEALTH_API_USERNAME: { required: true }
      DRIVEWEALTH_API_PASSWORD: { required: true }
      DRIVEWEALTH_API_URL: { required: true }
      DRIVEWEALTH_SQS_ARN: { required: false }
      GH_APP_ID: { required: true }
      GH_APP_INSTALLATION_ID: { required: true }
      GH_APP_PRIVATE_KEY: { required: true }
      TWILIO_VERIFICATION_SERVICE_ID: { required: true }
      TWILIO_MESSAGING_SERVICE_ID: { required: true }
      TWILIO_ACCOUNT_SID: { required: true }
      TWILIO_AUTH_TOKEN: { required: true }
      SENDGRID_API_KEY: { required: true }
      SLACK_BOT_TOKEN: { required: false }

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: us-east-1
  TF_VAR_env: ${{ inputs.env }}
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
  TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_eodhistoricaldata_api_token: ${{ secrets.TF_VAR_EODHISTORICALDATA_API_TOKEN }}
  TF_VAR_gnews_api_token: ${{ secrets.TF_VAR_GNEWS_API_TOKEN }}
  TF_VAR_google_credentials: ${{ secrets.GOOGLE_CREDENTIALS }}
  TF_VAR_google_user: ${{ secrets.GOOGLE_USER }}
  TF_VAR_google_project_id: ${{ secrets.GOOGLE_PROJECT_ID }}
  TF_VAR_google_organization_id: ${{ secrets.GOOGLE_ORGANIZATION_ID }}
  TF_VAR_google_region: ${{ secrets.GOOGLE_REGION }}
  TF_VAR_google_billing_id: ${{ secrets.GOOGLE_BILLING_ID }}
  TF_VAR_google_places_api_key: ${{ secrets.GOOGLE_PLACES_API_KEY }}
  TF_VAR_cloudflare_email: ${{ secrets.CLOUDFLARE_EMAIL }}
  TF_VAR_cloudflare_api_key: ${{ secrets.CLOUDFLARE_API_KEY }}
  TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
  TF_VAR_datadog_api_key: ${{ secrets.DATADOG_API_KEY }}
  TF_VAR_datadog_api_url: ${{ secrets.DATADOG_API_URL }}
  TF_VAR_datadog_app_key: ${{ secrets.DATADOG_APP_KEY }}
  TF_VAR_datadog_aws_external_id: ${{ secrets.DATADOG_AWS_EXTERNAL_ID }}
  TF_VAR_pg_production_host: ${{ secrets.PG_PRODUCTION_HOST }}
  TF_VAR_pg_production_port: ${{ secrets.PG_PRODUCTION_PORT }}
  TF_VAR_pg_production_internal_sync_username: ${{ secrets.PG_PRODUCTION_INTERNAL_SYNC_USERNAME }}
  TF_VAR_pg_production_internal_sync_password: ${{ secrets.PG_PRODUCTION_INTERNAL_SYNC_PASSWORD }}
  TF_VAR_plaid_client_id: ${{ secrets.PLAID_CLIENT_ID }}
  TF_VAR_plaid_secret: ${{ secrets.PLAID_SECRET }}
  TF_VAR_plaid_development_secret: ${{ secrets.PLAID_DEVELOPMENT_SECRET }}
  TF_VAR_plaid_sandbox_secret: ${{ secrets.PLAID_SANDBOX_SECRET }}
  TF_VAR_plaid_env: ${{ secrets.PLAID_ENV }}
  TF_VAR_algolia_app_id: ${{ secrets.ALGOLIA_APP_ID }}
  TF_VAR_algolia_admin_api_key: ${{ secrets.ALGOLIA_ADMIN_API_KEY }}
  TF_VAR_hubspot_api_key: ${{ secrets.HUBSPOT_API_KEY }}
  TF_VAR_polygon_api_token: ${{ secrets.POLYGON_API_TOKEN }}
  TF_VAR_coingecko_api_key: ${{ secrets.COINGECKO_API_KEY }}
  TF_VAR_onesignal_app_id: ${{ secrets.ONESIGNAL_APP_ID }}
  TF_VAR_onesignal_api_key: ${{ secrets.ONESIGNAL_API_KEY }}
  TF_VAR_revenuecat_api_key: ${{ secrets.REVENUECAT_API_KEY }}
  TF_VAR_bigquery_credentials: ${{ secrets.BIGQUERY_CREDENTIALS }}
  TF_VAR_stripe_api_key: ${{ secrets.STRIPE_API_KEY }}
  TF_VAR_stripe_publishable_key: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
  TF_VAR_drivewealth_is_uat: ${{ secrets.DRIVEWEALTH_IS_UAT }}
  TF_VAR_drivewealth_app_key: ${{ secrets.DRIVEWEALTH_APP_KEY }}
  TF_VAR_drivewealth_wlp_id: ${{ secrets.DRIVEWEALTH_WLP_ID }}
  TF_VAR_drivewealth_parent_ibid: ${{ secrets.DRIVEWEALTH_PARENT_IBID }}
  TF_VAR_drivewealth_ria_id: ${{ secrets.DRIVEWEALTH_RIA_ID }}
  TF_VAR_drivewealth_ria_product_id: ${{ secrets.DRIVEWEALTH_RIA_PRODUCT_ID }}
  TF_VAR_drivewealth_api_username: ${{ secrets.DRIVEWEALTH_API_USERNAME }}
  TF_VAR_drivewealth_api_password: ${{ secrets.DRIVEWEALTH_API_PASSWORD }}
  TF_VAR_drivewealth_api_url: ${{ secrets.DRIVEWEALTH_API_URL }}
  TF_VAR_drivewealth_sqs_arn: ${{ secrets.DRIVEWEALTH_SQS_ARN }}
  TF_VAR_github_app_id: ${{ secrets.GH_APP_ID }}
  TF_VAR_github_app_installation_id: ${{ secrets.GH_APP_INSTALLATION_ID }}
  TF_VAR_github_app_private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}
  TF_VAR_twilio_verification_service_id: ${{ secrets.TWILIO_VERIFICATION_SERVICE_ID }}
  TF_VAR_twilio_messaging_service_id: ${{ secrets.TWILIO_MESSAGING_SERVICE_ID }}
  TF_VAR_twilio_account_sid: ${{ secrets.TWILIO_ACCOUNT_SID }}
  TF_VAR_twilio_auth_token: ${{ secrets.TWILIO_AUTH_TOKEN }}
  TF_VAR_sendgrid_api_key: ${{ secrets.SENDGRID_API_KEY }}
  TF_VAR_slack_bot_token: ${{ secrets.SLACK_BOT_TOKEN }}

jobs:
  test:
    name: "Test"
    runs-on: ubuntu-latest
    if: inputs.only_plan
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Terraform Environment Variables
        run: |
          source .env.make
          source deployment/scripts/code_artifactory.sh
          echo "TF_VAR_base_image_registry_address=$BASE_IMAGE_REGISTRY_ADDRESS" >> $GITHUB_ENV
          echo "TF_VAR_base_image_version=$BASE_IMAGE_VERSION" >> $GITHUB_ENV
          echo "TF_VAR_codeartifact_pipy_url=$CODEARTIFACT_PIPY_URL" >> $GITHUB_ENV
          echo "TF_VAR_gainy_compute_version=$GAINY_COMPUTE_VERSION" >> $GITHUB_ENV
          
          echo "TF_VAR_source_code_branch=${GITHUB_REF:-${GITHUB_REF#refs/heads/}}"
          echo "TF_VAR_source_code_branch_name=${{ github.event.pull_request.title }}"

      - name: Docker Registry Auth
        run: make docker-auth

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: terraform

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=backend-${{ env.TF_VAR_env }}.hcl -reconfigure
        working-directory: terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: terraform

      - name: Terraform Plan
        id: plan
        if: inputs.only_plan
        run: terraform plan -no-color -lock=false
        working-directory: terraform

  deploy:
    name: "Deploy"
    runs-on: ubuntu-latest
    if: "!inputs.only_plan"
    environment: ${{ inputs.env }}
    concurrency: ${{ inputs.env }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Terraform Environment Variables
        run: |
          source .env.make
          source deployment/scripts/code_artifactory.sh
          echo "TF_VAR_base_image_registry_address=$BASE_IMAGE_REGISTRY_ADDRESS" >> $GITHUB_ENV
          echo "TF_VAR_base_image_version=$BASE_IMAGE_VERSION" >> $GITHUB_ENV
          echo "TF_VAR_codeartifact_pipy_url=$CODEARTIFACT_PIPY_URL" >> $GITHUB_ENV
          echo "TF_VAR_gainy_compute_version=$GAINY_COMPUTE_VERSION" >> $GITHUB_ENV
          
          echo "TF_VAR_source_code_branch=${GITHUB_REF:-${GITHUB_REF#refs/heads/}}"
          echo "TF_VAR_source_code_branch_name=${{ github.event.pull_request.title }}"

      - name: Docker Registry Auth
        run: make docker-auth

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=backend-${{ env.TF_VAR_env }}.hcl -reconfigure
        working-directory: terraform

      - name: Terraform State Cleanup Prepare
        id: state-clean-prepare
        # grep only needed resources
        # tr to make it a one-liner
        # sed to filter out :: command, that github apparently adds to step output for some f-cked up reason
        run: echo "resources=$(terraform state list | grep -P 'aws_apigatewayv2_integration|aws_apigatewayv2_route|aws_lambda_permission' | tr '\n' ' ' | sed 's/::.*//')" >> $GITHUB_OUTPUT
        working-directory: terraform

      - name: Terraform State Cleanup
        id: state-clean
        if: steps.state-clean-prepare.outputs.resources != ''
        run: terraform state rm ${{ steps.state-clean-prepare.outputs.resources }}
        working-directory: terraform

      - name: Terraform Apply
        id: apply
        if: "!inputs.only_plan"
        run: terraform apply -auto-approve
        working-directory: terraform
