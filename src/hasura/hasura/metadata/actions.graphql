type Mutation {
  apply_promocode(
    profile_id: Int!
    promocode: String!
    tariff: String!
  ): UpdatePurchasesOutput
}

type Query {
  create_plaid_link_token(
    profile_id: Int!
    redirect_uri: String!
    env: String
    access_token_id: Int
    purpose: String
  ): CreatePlaidLinkTokenOutput
}

type Query {
  fetchNewsData(
    symbol: String!
    limit: Int
  ): [NewsDataPoint]
}

type Query {
  get_match_score_by_ticker(
    profile_id: Int
    symbol: String
  ): MatchScore
}

type Query {
  get_match_scores_by_collection(
    profile_id: Int!
    collection_id: Int!
  ): [MatchScore]
}

type Query {
  get_match_scores_by_ticker_list(
    profile_id: Int!
    symbols: [String]
  ): [MatchScore]
}

type Query {
  get_portfolio_chart(
    profile_id: Int!
    periods: [String]!
    access_token_ids: [Int]
    account_ids: [Int]
    broker_ids: [String]
    institution_ids: [Int]
    interest_ids: [Int]
    category_ids: [Int]
    security_types: [String]
    ltt_only: Boolean
  ): [ChartDataPoint]
}

type Query {
  get_portfolio_chart_previous_period_close(
    profile_id: Int!
    access_token_ids: [Int]
    account_ids: [Int]
    broker_ids: [String]
    institution_ids: [Int]
    interest_ids: [Int]
    category_ids: [Int]
    security_types: [String]
    ltt_only: Boolean
  ): PortfolioChartPreviousPeriodClose
}

type Query {
  get_portfolio_holdings(
    profile_id: Int!
  ): [PortfolioHolding]
}

type Query {
  get_portfolio_piechart(
    profile_id: Int!
    access_token_ids: [Int]
    broker_ids: [String]
  ): [PieChartDataPoint]
}

type Query {
  get_portfolio_transactions(
    profile_id: Int!
    count: Int
    offset: Int
  ): [PortfolioTransaction]
}

type Mutation {
  get_pre_signed_upload_form(
    profile_id: Int!
    upload_type: String!
    content_type: String!
  ): PreSignedUploadFormOutput
}

type Query {
  get_promocode(
    code: String!
  ): Promocode
}

type Query {
  get_recommended_collections(
    profile_id: Int!
    limit: Int
    force: Boolean
  ): [Collection]
}

type Mutation {
  kyc_add_document(
    profile_id: Int!
    uploaded_file_id: Int!
    type: String!
    side: String!
  ): OkOutput
}

type Query {
  kyc_get_form_config(
    profile_id: Int!
  ): KycFormConfig
}

type Query {
  kyc_get_status(
    profile_id: Int!
  ): KycStatus
}

type Mutation {
  kyc_send_form(
    profile_id: Int!
  ): KycStatus
}

type Query {
  link_plaid_account(
    profile_id: Int!
    public_token: String!
    env: String
    access_token_id: Int
    purpose: String
  ): LinkPlaidAccountOutput
}

type Mutation {
  plaid_webhook(
    webhook_type: String!
    webhook_code: String!
    item_id: String!
    error: PlaidWebhookError
    new_holdings: Int
    updated_holdings: Int
    new_investments_transactions: Int
    cancelled_investments_transactions: Int
  ): PlaidWebhookOutput
}

type Mutation {
  rehandle_queue_messages(
    ids: [Int]!
  ): ReHandleQueueMessagesOutput
}

type Query {
  search_collections(
    query: String!
    offset: Int
    limit: Int
  ): [Collection]
}

type Query {
  search_tickers(
    query: String!
    offset: Int
    limit: Int
  ): [Ticker]
}

type Mutation {
  set_recommendation_settings(
    profile_id: Int!
    interests: [Int]
    categories: [Int]
    recommended_collections_count: Int
  ): SetRecommendationSettingsOutput
}

type Query {
  stripe_get_checkout_url(
    price_id: String!
    success_url: String!
    cancel_url: String!
  ): StripeGetCheckoutUrl
}

type Query {
  stripe_get_payment_sheet_data(
    profile_id: Int!
  ): StripeGetPaymentSheetDataOutput
}

type Mutation {
  stripe_webhook(
    id: String
    object: String
    api_version: String
    created: Int
    data: jsonb
    livemode: Boolean
    pending_webhooks: Int
    request: jsonb
    type: String
  ): OkOutput
}

type Mutation {
  trading_add_money(
    profile_id: Int!
    trading_account_id: Int!
    amount: Float!
  ): OkOutput
}

type Mutation {
  trading_delete_data(
    profile_id: Int!
  ): OkOutput
}

type Mutation {
  trading_delete_funding_account(
    profile_id: Int!
    funding_account_id: Int!
  ): OkOutput
}

type Mutation {
  trading_deposit_funds(
    profile_id: Int!
    trading_account_id: Int
    amount: Float!
    funding_account_id: Int!
  ): TradingMoneyFlowOutput
}

type Query {
  trading_get_actual_collection_holdings(
    profile_id: Int!
    collection_id: Int!
  ): [ActualCollectionHoldingOutput]
}

type Query {
  trading_get_collection_data(
    profile_id: Int!
    collection_id: Int!
  ): TradingGetCollectionDataOutput
}

type Query {
  trading_get_funding_accounts(
    profile_id: Int!
  ): [FundingAccount]
}

type Mutation {
  trading_link_bank_account_with_plaid(
    profile_id: Int!
    account_id: String!
    account_name: String!
    access_token_id: Int!
  ): TradingLinkBankAccountWithPlaidOutput
}

type Mutation {
  trading_reconfigure_collection_holdings(
    profile_id: Int!
    collection_id: Int!
    weights: [TickerWeight]
    target_amount_delta: Float!
  ): TradingReconfigureCollectionHoldingsOutput
}

type Mutation {
  trading_sync_provider_data(
    profile_id: Int!
  ): OkOutput
}

type Mutation {
  trading_withdraw_funds(
    profile_id: Int!
    trading_account_id: Int
    amount: Float!
    funding_account_id: Int!
  ): TradingMoneyFlowOutput
}

type Mutation {
  update_purchases(
    profile_id: Int!
  ): UpdatePurchasesOutput
}

input PlaidWebhookError {
  error_code: Int
}

input TickerWeight {
  symbol: String!
  weight: Float!
}

type ChartDataPoint {
  datetime: String
  period: String
  open: Float
  high: Float
  low: Float
  close: Float
  adjusted_close: Float
  volume: Float
}

type PieChartDataPoint {
  weight: Float
  entity_name: String
  entity_type: String
  entity_id: String
  relative_daily_change: Float
  absolute_value: Float
  absolute_daily_change: Float
}

type PortfolioChartPreviousPeriodClose {
  prev_close_1d: Float
  prev_close_1w: Float
  prev_close_1m: Float
  prev_close_3m: Float
  prev_close_1y: Float
  prev_close_5y: Float
}

type NewsDataPoint {
  datetime: String
  title: String
  description: String
  url: String
  imageUrl: String
  sourceName: String
  sourceUrl: String
}

type LivePriceData {
  datetime: String
  daily_change: Float
  daily_change_p: Float
  close: Float
}

type LiveStockPriceData {
  symbol: String
  datetime: String
  daily_change: Float
  daily_change_p: Float
  close: Float
}

type Ticker {
  symbol: String!
}

type Collection {
  id: Int!
  uniq_id: String!
}

type MatchScore {
  symbol: String!
  match_score: Int!
  is_match: Boolean!
  fits_risk: Int!
  risk_similarity: Float!
  fits_categories: Int!
  category_matches: String
  fits_interests: Int!
  interest_matches: String
}

type LinkPlaidAccountOutput {
  result: Boolean!
  plaid_access_token_id: Int
  accounts: [AccountInformation]
}

type PortfolioHolding {
  id: Int!
  iso_currency_code: String
  created_at: String!
  updated_at: String!
  quantity: Float!
  ref_id: String!
  security_id: Int!
  account_id: Int!
  profile_id: Int!
  plaid_access_token_id: Int!
}

type PortfolioTransaction {
  id: Int!
  amount: Float!
  date: String!
  fees: Float!
  iso_currency_code: String
  name: String!
  price: Float!
  quantity: Float!
  subtype: String!
  type: String!
  ref_id: String!
  security_id: Int!
  profile_id: Int!
  account_id: Int!
  created_at: String!
  updated_at: String!
  plaid_access_token_id: Int!
}

type CreatePlaidLinkTokenOutput {
  link_token: String!
}

type PlaidWebhookOutput {
  count: Int!
}

type StripeGetCheckoutUrl {
  url: String!
}

type UpdatePurchasesOutput {
  subscription_end_date: String
}

type Promocode {
  id: Int!
  description: String
  name: String
  config: String!
}

type SetRecommendationSettingsOutput {
  recommended_collections: [Collection]
}

type KycFormConfig {
  first_name: KycFormFieldConfig
  last_name: KycFormFieldConfig
  country: KycFormFieldConfig
  email_address: KycFormFieldConfig
  language: KycFormFieldConfig
  employment_status: KycFormFieldConfig
  employment_type: KycFormFieldConfig
  employment_position: KycFormFieldConfig
  investor_profile_experience: KycFormFieldConfig
  investor_profile_risk_tolerance: KycFormFieldConfig
  investor_profile_objectives: KycFormFieldConfig
  investor_profile_annual_income: KycFormFieldConfig
  investor_profile_net_worth_total: KycFormFieldConfig
  investor_profile_net_worth_liquid: KycFormFieldConfig
  disclosures_drivewealth_terms_of_use: KycFormFieldConfig
  disclosures_drivewealth_customer_agreement: KycFormFieldConfig
  disclosures_drivewealth_market_data_agreement: KycFormFieldConfig
  disclosures_rule14b: KycFormFieldConfig
  disclosures_drivewealth_privacy_policy: KycFormFieldConfig
  disclosures_signed_by: KycFormFieldConfig
  tax_id_value: KycFormFieldConfig
  tax_id_type: KycFormFieldConfig
  citizenship: KycFormFieldConfig
  gender: KycFormFieldConfig
  marital_status: KycFormFieldConfig
  birthdate: KycFormFieldConfig
  address_street1: KycFormFieldConfig
  address_city: KycFormFieldConfig
  address_postal_code: KycFormFieldConfig
  address_country: KycFormFieldConfig
}

type KycFormFieldConfig {
  required: Boolean
  placeholder: String
  choices: json
}

type KycSendFormOutput {
  error_message: String
  status: String
}

type KycStatus {
  message: String
  status: String
  updated_at: String
}

type PreSignedUploadFormOutput {
  id: Int!
  url: String!
  method: String!
}

type LinkBankAccountWithPlaidOutput {
  errorMessage: String
}

type AccountInformation {
  account_id: String!
  balance_available: Int!
  balance_current: Int!
  iso_currency_code: String!
  mask: String!
  name: String!
  official_name: String!
}

type TradingLinkBankAccountWithPlaidOutput {
  id: Int!
}

type FundingAccount {
  id: Int!
}

type TradingMoneyFlowOutput {
  trading_money_flow_id: Int!
}

type SampleOutput {
  accessToken: String!
}

type ActualCollectionHoldingOutput {
  symbol: String!
  target_weight: Float
  actual_weight: Float
  value: Float
}

type OkOutput {
  ok: Boolean
}

type StripeGetPaymentSheetDataOutput {
  setup_intent_client_secret: String!
  ephemeral_key: String!
  customer_id: String!
  publishable_key: String!
}

type TradingReconfigureCollectionHoldingsOutput {
  trading_collection_version_id: Int!
}

type ReHandleQueueMessagesOutput {
  success: Int!
  unsupported: Int!
  error: Int!
}

type KycFormChoicesFieldConfig {
  name: String!
  value: String!
}

type TradingGetCollectionDataOutput {
  actual_value: Float!
  history: TradingCollectionHistoryOutput
}

type TradingCollectionVersionData {
  target_amount_delta: Float!
  created_at: String!
  executed_at: String!
}

type TradingCollectionHistoryOutput {
  pending: [TradingCollectionVersionData]
  successful: [TradingCollectionVersionData]
}

