CREATE TABLE "app"."profile_scoring_settings" ("profile_id" integer NOT NULL, "created_at" timestamptz NOT NULL DEFAULT now(), "risk_level" float4 NOT NULL, "average_market_return" integer NOT NULL, "investment_horizon" float4 NOT NULL, "unexpected_purchases_source" varchar NOT NULL, "damage_of_failure" float4 NOT NULL, "stock_market_risk_level" varchar NOT NULL, "trading_experience" varchar NOT NULL, "if_market_drops_20_i_will_buy" float4 NOT NULL, "if_market_drops_40_i_will_buy" float4, PRIMARY KEY ("profile_id") , FOREIGN KEY ("profile_id") REFERENCES "app"."profiles"("id") ON UPDATE cascade ON DELETE cascade, CONSTRAINT "risk_level" CHECK (risk_level >= 0::real AND risk_level <= 1::real), CONSTRAINT "average_market_return" CHECK (average_market_return::integer = ANY (ARRAY[5, 15, 25, 50])), CONSTRAINT "investment_horizon" CHECK (investment_horizon >= 0::real AND investment_horizon <= 1::real), CONSTRAINT "unexpected_purchases_source" CHECK (unexpected_purchases_source = ANY (ARRAY['checking_savings'::character varying, 'stock_investments'::character varying, 'credit_card'::character varying, 'other_loans'::character varying])), CONSTRAINT "damage_of_failure" CHECK (damage_of_failure >= 0::real AND damage_of_failure <= 1::real), CONSTRAINT "stock_market_risk_level" CHECK (stock_market_risk_level = ANY (ARRAY['very_risky'::character varying, 'somewhat_risky'::character varying, 'neutral'::character varying, 'somewhat_safe'::character varying, 'very_safe'::character varying])), CONSTRAINT "trading_experience" CHECK (trading_experience = ANY (ARRAY['never_tried'::character varying, 'very_little'::character varying, 'companies_i_believe_in'::character varying, 'etfs_and_safe_stocks'::character varying, 'advanced'::character varying, 'daily_trader'::character varying, 'investment_funds'::character varying, 'professional'::character varying, 'dont_trade_after_bad_experience'::character varying])), CONSTRAINT "if_market_drops_20_i_will_buy" CHECK (if_market_drops_20_i_will_buy >= 0::real AND if_market_drops_20_i_will_buy <= 1::real
), CONSTRAINT "if_market_drops_40_i_will_buy" CHECK (if_market_drops_40_i_will_buy >= 0::real AND if_market_drops_40_i_will_buy <= 1::real));
