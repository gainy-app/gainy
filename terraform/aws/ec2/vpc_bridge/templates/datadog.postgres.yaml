init_config:

instances:
  - dbm: ${DBM_ENABLED}
    host: ${PG_HOST}
    port: ${PG_PORT}
    username: datadog
    password: ${PG_DATADOG_PASSWORD}
    dbname: ${PG_DBNAME}
    disable_generic_tags: true
    custom_queries:
      - metric_prefix: app
        query: >
          with dags (dag_id, dag_interval) as (
                                                  values ('gainy-dag', interval '1 day'),
                                                         ('realtime-dbt-dag', interval '5 minutes'),
                                                         ('realtime-website-dag', interval '5 minutes'),
                                                         ('send-notifications', interval '1 minute'),
                                                         ('charge-invoices', interval '1 day'),
                                                         ('create-invoices', interval '1 month'),
                                                         ('update-collection-weights', interval '1 month'),
                                                         ('update-account-balances', interval '1 day')
                                              ),
               dag_next_run as
                   (
                       select distinct on (
                           dag_id
                           ) dag_id,
                             state,
                             start_date + dag_interval as next_run_date
                       from airflow.dag_run
                                join dags using (dag_id)
                       where state in ('success', 'running')
                       order by dag_id, start_date desc
               ),
               dag_runs_metrics as
                   (
                       select dag_id,
                              case
                                  when state = 'running'
                                      then 0
                                  else
                                      greatest(0, extract(epoch from now() - next_run_date - interval '5 minutes'))
                                  end as seconds_from_next_dag_run
                       from dag_next_run
               ),
               successful_dag_runs_metrics as
                   (
                       select distinct on (
                           dag_id
                           ) dag_id,
                             extract(epoch from end_date - start_date) / 60 as latest_dag_run_duration_minutes
                       from airflow.dag_run
                       where state = 'success'
                         and end_date - start_date >= interval '1 minute'
                       order by dag_id, end_date desc
               ),
               failed_dag_runs_metrics as
                   (
                       select dag_id,
                              count(*) as failed_dag_runs
                       from airflow.dag_run
                       where state = 'failed'
                         and start_date > now() - interval '1 day'
                         and (dag_id != 'realtime-dbt-dag' or start_date > now() - interval '1 day')
                       group by dag_id
               ),
               failed_tasks_metrics as
                   (
                       select dag_id,
                              count(*) as failed_tasks
                       from airflow.task_instance
                       where state not in ('success', 'removed', 'running')
                         and start_date > now() - interval '1 day'
                       group by dag_id
               )
          select dags.dag_id,
                 coalesce(dag_runs_metrics.seconds_from_next_dag_run, 0) as seconds_from_next_dag_run,
                 successful_dag_runs_metrics.latest_dag_run_duration_minutes,
                 coalesce(failed_dag_runs_metrics.failed_dag_runs, 0)    as failed_dag_runs,
                 coalesce(failed_tasks_metrics.failed_tasks, 0)          as failed_tasks
          from dags
                   join dag_runs_metrics on dag_runs_metrics.dag_id = dags.dag_id
                   left join successful_dag_runs_metrics on successful_dag_runs_metrics.dag_id = dags.dag_id
                   left join failed_dag_runs_metrics on failed_dag_runs_metrics.dag_id = dags.dag_id
                   left join failed_tasks_metrics on failed_tasks_metrics.dag_id = dags.dag_id
        columns:
          - name: dag_id
            type: tag
          - name: seconds_from_next_dag_run
            type: gauge
          - name: latest_dag_run_duration_minutes
            type: gauge
          - name: failed_dag_runs
            type: gauge
          - name: failed_tasks
            type: gauge
        tags:
          - env:${ENV}
      - metric_prefix: app
        query: >
          select code,
                 count(*) as data_errors_count
          from ${PUBLIC_SCHEMA_NAME}.data_checks
          group by code
        columns:
          - name: code
            type: tag
          - name: data_errors_count
            type: gauge
        tags:
          - env:${ENV}
